--1. How many customers has Foodie-Fi ever had?

SELECT COUNT(DISTINCT customer_id)
FROM subscriptions;

--2. What is the monthly distribution of trial plan start_date values for our dataset - use the start of the month as the group by value

SELECT DATE_TRUNC('month', s.start_date) AS month, COUNT(*) AS trial_plan_count
FROM subscriptions s
JOIN plans p
	ON s.plan_id = p.plan_id
WHERE s.plan_id = 0
GROUP BY 1
ORDER BY 1;
    
--3. What plan start_date values occur after the year 2020 for our dataset? Show the breakdown by count of events for each plan_name

SELECT p.plan_name, COUNT(CASE
WHEN s.start_date>'2020-12-31' THEN 1
ELSE NULL
END)
FROM subscriptions s
JOIN plans p
	ON s.plan_id = p.plan_id
GROUP BY 1;

--4. What is the customer count and percentage of customers who have churned rounded to 1 decimal place?
    
SELECT
  COUNT(DISTINCT subscriptions.customer_id) AS total_customers,
  COUNT(DISTINCT CASE WHEN plans.plan_name = 'churn' THEN subscriptions.customer_id END) AS churned_customers,
  ROUND(
    (COUNT(DISTINCT CASE WHEN plans.plan_name = 'churn' THEN subscriptions.customer_id END) * 100.0) /
    COUNT(DISTINCT subscriptions.customer_id), 1
  ) AS churn_percentage
FROM 
  subscriptions
JOIN 
  plans ON subscriptions.plan_id = plans.plan_id;

--5. How many customers have churned straight after their initial free trial - what percentage is this rounded to the nearest whole number?

WITH trial_customers AS (
  SELECT 
    customer_id, 
    plan_id, 
    start_date, 
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY start_date) AS orderr
  FROM 
    subscriptions)
    
SELECT
  COUNT(DISTINCT tc.customer_id) AS total_customers2,
  COUNT(DISTINCT CASE 
      WHEN tc.orderr = 2 AND tc.plan_id = 4 THEN tc.customer_id 
      ELSE NULL 
    END) AS churned_customers2,
  ROUND(
    (COUNT(DISTINCT CASE 
        WHEN tc.orderr = 2 AND tc.plan_id = 4 THEN tc.customer_id 
        ELSE NULL 
      END) * 100.0) /
    COUNT(DISTINCT tc.customer_id), 1
  ) AS churn_percentage
FROM 
  trial_customers tc;

--6. What is the number and percentage of customer plans after their initial free trial?
    
WITH trial_customers AS (
  SELECT 
    plan_id, 
    COUNT(*) AS total_per_plan
  FROM subscriptions
  WHERE plan_id != 0
  GROUP BY plan_id)
  
SELECT 
  s.plan_id, 
  tc.total_per_plan,
  ROUND((tc.total_per_plan * 100.0 / (SELECT COUNT(*) FROM subscriptions WHERE plan_id != 0)), 2) AS percentage
FROM subscriptions s
JOIN trial_customers tc
  ON s.plan_id = tc.plan_id
GROUP BY s.plan_id, tc.total_per_plan
ORDER BY s.plan_id;

--7. What is the customer count and percentage breakdown of all 5 plan_name values at 2020-12-31?

WITH breakdown AS (
  SELECT 
    plan_id, 
    COUNT(*) AS total_per_plan
  FROM subscriptions
  WHERE start_date>'2020-12-31'
  GROUP BY plan_id)
  
SELECT 
  p.plan_name, s.plan_id, 
  b.total_per_plan,
  ROUND((b.total_per_plan * 100.0 / (SELECT COUNT(*) FROM subscriptions WHERE start_date>'2020-12-31')), 2) AS percentage
FROM subscriptions s
JOIN breakdown b
  ON s.plan_id = b.plan_id
JOIN plans p
  ON p.plan_id = s.plan_id
GROUP BY p.plan_name, s.plan_id, b.total_per_plan
ORDER BY s.plan_id;

--8. How many customers have upgraded to an annual plan in 2020?

WITH trial_customers AS (
  SELECT 
    customer_id, 
    plan_id, 
    start_date, 
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY start_date) AS orderr
  FROM 
    subscriptions)
    
 SELECT COUNT(*)
 FROM trial_customers
 WHERE orderr > 1 AND plan_id = 3 AND (start_date BETWEEN '2020-01-01' AND '2020-12-31');

--9. How many days on average does it take for a customer to an annual plan from the day they join Foodie-Fi?

WITH start_trial AS (SELECT customer_id, CASE WHEN plan_id = 0 THEN start_date ELSE NULL END AS start_triall
  FROM subscriptions),
  
start_annual AS (SELECT customer_id, CASE WHEN plan_id = 3 THEN start_date ELSE NULL END AS start_annuall
  FROM subscriptions),
  
trial_annual AS (SELECT st.customer_id, st.start_triall, sa.start_annuall
  FROM start_trial st
  JOIN start_annual sa ON st.customer_id = sa.customer_id
  WHERE st.start_triall IS NOT NULL AND sa.start_annuall IS NOT NULL),
  
number_of_days AS (SELECT customer_id, (start_annuall - start_triall) AS no_days
FROM trial_annual)

SELECT ROUND(AVG(no_days),2)
FROM number_of_days;

--10. Can you further breakdown this average value into 30 day periods (i.e. 0-30 days, 31-60 days etc)

WITH start_trial AS (SELECT customer_id, CASE WHEN plan_id = 0 THEN start_date ELSE NULL END AS start_triall
  FROM subscriptions),
  
start_annual AS (SELECT customer_id, CASE WHEN plan_id = 3 THEN start_date ELSE NULL END AS start_annuall
  FROM subscriptions),
  
trial_annual AS (SELECT st.customer_id, st.start_triall, sa.start_annuall
  FROM start_trial st
  JOIN start_annual sa ON st.customer_id = sa.customer_id
  WHERE st.start_triall IS NOT NULL AND sa.start_annuall IS NOT NULL),
  
number_of_days AS (SELECT customer_id, (start_annuall - start_triall) AS no_days
FROM trial_annual)

SELECT 
  COUNT(CASE WHEN no_days BETWEEN 0 AND 100 THEN 1 END) AS zero_hundred,
  COUNT(CASE WHEN no_days BETWEEN 101 AND 200 THEN 1 END) AS one_two,
  COUNT(CASE WHEN no_days BETWEEN 201 AND 300 THEN 1 END) AS two_three,
  COUNT(CASE WHEN no_days BETWEEN 301 AND 400 THEN 1 END) AS three_four
FROM number_of_days;

--11. How many customers downgraded from a pro monthly to a basic monthly plan in 2020?

WITH trial_customers AS (
  SELECT 
    customer_id, 
    plan_id, 
    start_date, 
    ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY start_date DESC) AS orderr
  FROM 
    subscriptions
  WHERE 
    plan_id = 1 OR plan_id = 2
),
downgrades AS (
  SELECT 
    t1.customer_id
  FROM 
    trial_customers t1
  JOIN 
    trial_customers t2 
    ON t1.customer_id = t2.customer_id
  WHERE 
    t1.plan_id = 2
    AND t2.plan_id = 1
    AND t1.start_date < t2.start_date
    AND t2.start_date BETWEEN '2020-01-01' AND '2020-12-31'
)
SELECT COUNT(DISTINCT customer_id) AS customers_downgraded
FROM downgrades;

